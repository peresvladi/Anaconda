
-) Способом ООП создаем проект: две точки (имеющие координады х, у)

<details>

<summary></summary>



```javascript
1.1) в файле: Point2D.java

создаем два поля, так:

package ansel.OOP.komp2.Lesson_komp2.L1_komp2;

public class Point2D {
    public int x, y;
}

1.2.1) Это позволяет в файле текущей папке в данном случае имеющем имя Program.java описать следующую логику (создали новый метод который принимает две точки (см. строка 31), а у точек затем имеется х и у (см. строка 32) с которыми можно далее манипулировать). 1.2.2) Определеяем экземпляр (представитель) класса точка (см. строка 35). 1.2.3) Указываем значения данных полей (см. строка 36, 37). 1.2.3 Далее вторая точка (см. строка 40) оределяем значения ее полей (см. строка 41, 42) и т.д и т.п. 1.2.4) используя метод distance (см. строка 28, 44) определяем значения передвая в него знаянеия двух точек

package ansel.OOP.komp2.Lesson_komp2;

import ansel.OOP.komp2.Lesson_komp2.L1_komp2.Point2D;

public class Program {
static double distance (int x1, int y1, int x2, int y2){
    return Math.sqrt(Math.pow(x2-x1, 2) + Math.pow(y2-y1, 2));
}
static double distance (Point2D a, Point2D b){
    return Math.sqrt(Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2));
}
public static void main(String [] args) {
    Point2D a = new Point2D();
    a.x = 0;
    a.y = 2;
    System.out.println(a.toString());

    Point2D b = new Point2D();
    b.x = 0;
    b.y = 10;
    System.out.println(b.toString());
    System.out.println(distance(a,b));
    }
  
}




```



</details>


-) Наполяем выше созданный класс необходимым поведением, меняем код в файле Program.java просто вызываем констроктор которому передеаем: 0, 2 (см. строка 81) и добавляем приемлемое для этого поведение в класс, в данном случае в файл: Point2D.java (см. строка 97 - 100) В результате в строке 81 появляются значения 0, 2. Однако это ведет к невозможности использование старого констроктора (констроктор без аргументов (примечание: технически можно создать свой конструктор по умолчанию)) 

<details>

<summary></summary>



```javascript

package ansel.OOP.komp2.Lesson_komp2;

import ansel.OOP.komp2.Lesson_komp2.L1_komp2.Point2D;

public class Program {
static double distance (int x1, int y1, int x2, int y2){
    return Math.sqrt(Math.pow(x2-x1, 2) + Math.pow(y2-y1, 2));
}
static double distance (Point2D a, Point2D b){
    return Math.sqrt(Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2));
}
public static void main(String [] args) {
    Point2D a = new Point2D(0, 2);
   
    System.out.println(a.toString());

    Point2D b = new Point2D();
    b.x = 0;
    b.y = 10;
    System.out.println(b.toString());
    System.out.println(distance(a, b));
    }
  
}

package ansel.OOP.komp2.Lesson_komp2.L1_komp2;

public class Point2D {
    public int x, y;
    public Point2D(int valueX, int valueY) {
       x = valueX;
       y = valueY;
    }
}

```



</details>


-) Можем описать следующий конструктор в файле класса (см. строка 130-132)

<details>

<summary></summary>



```javascript

package ansel.OOP.komp2.Lesson_komp2.L1_komp2;

public class Point2D {
    public int x, y;
    public Point2D(int valueX, int valueY) {
       x = valueX;
       y = valueY;
    }

    public Point2D(){
        x = 0;
        y = 0;
    } 
}



```



</details>


-) Можем описать следующий конструктор в файле класса (см. строка 169-171) и запустим код.

<details>

<summary></summary>



```javascript

package ansel.OOP.komp2.Lesson_komp2.L1_komp2;

public class Point2D {
    public int x, y;
    public Point2D(int valueX, int valueY) {
       x = valueX;
       y = valueY;
    }

    public Point2D(){
        x = 0;
        y = 0;
    } 

    public Point2D(int value) {
        x = value;
        y = value;
    }
}

Результат запуска кода (файл - Program.java):

package ansel.OOP.komp2.Lesson_komp2;

import ansel.OOP.komp2.Lesson_komp2.L1_komp2.Point2D;

public class Program {
static double distance (int x1, int y1, int x2, int y2){
    return Math.sqrt(Math.pow(x2-x1, 2) + Math.pow(y2-y1, 2));
}
static double distance (Point2D a, Point2D b){
    return Math.sqrt(Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2));
}
public static void main(String [] args) {
    Point2D a = new Point2D(0, 2);
   
    System.out.println(a);

    Point2D b = new Point2D(10);
    System.out.println(b);
    
    //System.out.println(b.toString());
    System.out.println(distance(a, b));
    } 
}

TERMINAL

ansel.OOP.komp2.Lesson_komp2.L1_komp2.Point2D@3fee733d
ansel.OOP.komp2.Lesson_komp2.L1_komp2.Point2D@5acf9800
12.806248474865697
vladi@vladi-x540y:~/Education/master$ 

```

Метод toString по умолчанию выводит имена с использованием хэш-кода (см. строки 203, 204)

</details>


-)Создаем метод для приемлевого вывода значения

<details>

<summary></summary>



```javascript

В файле класса создаем метод getInfo(см. строки 245, 246):

package ansel.OOP.komp2.Lesson_komp2.L1_komp2;

public class Point2D {
    public int x, y;
    public Point2D(int valueX, int valueY) {
       x = valueX;
       y = valueY;
    }

    public Point2D(){
        x = 0;
        y = 0;
    } 

    public Point2D(int value) {
        x = value;
        y = value;
    }
    public String getInfo() {
    return String.format("x: %d, y: %d", x, y);
    }
}

Вносим изменение в клиентский файл, что бы использовать метод getInfo  и toString (см. строки 267, 270)
package ansel.OOP.komp2.Lesson_komp2;

package ansel.OOP.komp2.Lesson_komp2;

import ansel.OOP.komp2.Lesson_komp2.L1_komp2.Point2D;

public class Program {
static double distance (int x1, int y1, int x2, int y2){
    return Math.sqrt(Math.pow(x2-x1, 2) + Math.pow(y2-y1, 2));
}
static double distance (Point2D a, Point2D b){
    return Math.sqrt(Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2));
}
public static void main(String [] args) {
    Point2D a = new Point2D(0, 2);
   
    System.out.println(a.getInfo());

    Point2D b = new Point2D(10);
    System.out.println(b.toString());
    
    System.out.println(distance(a, b));
    } 
}


Результат запуска:

TERMINAL

x: 0, y: 2
ansel.OOP.komp2.Lesson_komp2.L1_komp2.Point2D@4c873330
12.806248474865697

ВЫВОД: значение а выводит в установленном методом приемлемом формате, 
а метод toString нет. (см. строки 281, 282).

```



</details>


-) Переопределяем метод toString, для вывода в приемлемом формате (см. строки 237-239)

<details>

<summary></summary>



```javascript

package ansel.OOP.komp2.Lesson_komp2.L1_komp2;

public class Point2D {
    public int x, y;
    public Point2D(int valueX, int valueY) {
       x = valueX;
       y = valueY;
    }

    public Point2D(){
        x = 0;
        y = 0;
    } 

    public Point2D(int value) {
        x = value;
        y = value;
    }
    public String getInfo() {
    return String.format("x: %d, y: %d", x, y);
    }

    @Override
    public String toString() {
            return getInfo();
    }
}

Запускаем клиентский код (файл Program):


package ansel.OOP.komp2.Lesson_komp2;

import ansel.OOP.komp2.Lesson_komp2.L1_komp2.Point2D;

public class Program {
static double distance (int x1, int y1, int x2, int y2){
    return Math.sqrt(Math.pow(x2-x1, 2) + Math.pow(y2-y1, 2));
}
static double distance (Point2D a, Point2D b){
    return Math.sqrt(Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2));
}
public static void main(String [] args) {
    Point2D a = new Point2D(0, 2);
   
    System.out.println(a.getInfo());

    Point2D b = new Point2D(10);
    System.out.println(b.toString());
    
    //System.out.println(b.toString());
    System.out.println(distance(a, b));
    } 
}
 
 Результат:

TERMINAL

x: 0, y: 2
x: 10, y: 10
12.806248474865697

ВЫВОД:
Метод getInfo и toString (который переписан на вывод формата 
с помощью метода getInfo) выводят значения в приемлемом формате.






```



</details>



-) Меняем индефикатор доступа public на private в строке 413.

<details>

<summary></summary>



```javascript

package ansel.OOP.komp2.Lesson_komp2.L1_komp2;

public class Point2D {
    public int x, y;
    public Point2D(int valueX, int valueY) {
       x = valueX;
       y = valueY;
    }

    public Point2D(){
        x = 0;
        y = 0;
    } 

    public Point2D(int value) {
        x = value;
        y = value;
    }
    private String getInfo() {
    return String.format("x: %d, y: %d", x, y);
    }

    @Override
    public String toString() {
            return getInfo();
    }
}

В клиентскоь коде (файл Program) метод getInfo становится недоступным :


package ansel.OOP.komp2.Lesson_komp2;

import ansel.OOP.komp2.Lesson_komp2.L1_komp2.Point2D;

public class Program {
static double distance (int x1, int y1, int x2, int y2){
    return Math.sqrt(Math.pow(x2-x1, 2) + Math.pow(y2-y1, 2));
}
static double distance (Point2D a, Point2D b){
    return Math.sqrt(Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2));
}
public static void main(String [] args) {
    Point2D a = new Point2D(0, 2);
   
    System.out.println(a.getInfo());

    Point2D b = new Point2D(10);
    System.out.println(b.toString());
    
    //System.out.println(b.toString());
    System.out.println(distance(a, b));
    } 
}
 

ВЫВОД:
Метод getInfo после изменения индефикатора может быть доступен 
только в коде в котором был описан, из любых других мест стал недоступен.






```



</details>


-) Убираем вызов метода getInfo из клиентского кода (файл Program), (см. строки 522)

<details>

<summary></summary>



```javascript

package ansel.OOP.komp2.Lesson_komp2.L1_komp2;

public class Point2D {
    public int x, y;
    public Point2D(int valueX, int valueY) {
       x = valueX;
       y = valueY;
    }

    public Point2D(){
        x = 0;
        y = 0;
    } 

    public Point2D(int value) {
        x = value;
        y = value;
    }
    private String getInfo() {
    return String.format("x: %d, y: %d", x, y);
    }

    @Override
    public String toString() {
            return getInfo();
    }
}

Запускаем (файл Program) :


package ansel.OOP.komp2.Lesson_komp2;

import ansel.OOP.komp2.Lesson_komp2.L1_komp2.Point2D;

public class Program {
static double distance (int x1, int y1, int x2, int y2){
    return Math.sqrt(Math.pow(x2-x1, 2) + Math.pow(y2-y1, 2));
}
static double distance (Point2D a, Point2D b){
    return Math.sqrt(Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2));
}
public static void main(String [] args) {
    Point2D a = new Point2D(0, 2);
   
    System.out.println(a);

    Point2D b = new Point2D(10);
    System.out.println(b.toString());
    
    //System.out.println(b.toString());
    System.out.println(distance(a, b));
    } 
}

Результат:

TERMINAL

x: 0, y: 2
x: 10, y: 10
12.806248474865697

ВЫВОД:
Значения выводятся в удоном формате, т.к. по умолчанию вывод осуществляется
с помощью метода toString, который был переписан для приемлевого вывода.



-) Что такое переопределение.

<details>

<summary></summary>



```javascript

Переопределение это изменение поведения которое было установлено раннее, в перегрузка означает, что в рамках одной сущности переписываются методы отличающиеся сигнатурой (изменяются количество аргументов в одном методе, или тип данных этих аргументов).


```



</details>


-) Возможна ли перегрузка в java по имени аргументов.

<details>

<summary></summary>



```javascript

Нет не возможна. В некоторых других языках програмировния допускается. Например в свифт.


```



</details>


-) Применение принципа Драй (используется код написанный один раз повторно).

<details>

<summary></summary>



```javascript
package ansel.OOP.komp2.Lesson_komp2.L1_komp2;

public class Point2D {
    public int x, y;
    public Point2D(int valueX, int valueY) {
       x = valueX;
       y = valueY;
    }

    public Point2D(int value){
        this(value, value);
    } 

    public Point2D() {
        this(0);
    }
    private String getInfo() {
    return String.format("x: %d, y: %d", x, y);
    }

    @Override
    public String toString() {
            return getInfo();
    }
}

Запускаем клиентский код (файл Program);

package ansel.OOP.komp2.Lesson_komp2;

import ansel.OOP.komp2.Lesson_komp2.L1_komp2.Point2D;

public class Program {
static double distance (int x1, int y1, int x2, int y2){
    return Math.sqrt(Math.pow(x2-x1, 2) + Math.pow(y2-y1, 2));
}
static double distance (Point2D a, Point2D b){
    return Math.sqrt(Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2));
}
public static void main(String [] args) {
    Point2D a = new Point2D(0, 2);
   
    System.out.println(a);

    Point2D b = new Point2D(10);
    System.out.println(b.toString());
    
    //System.out.println(b.toString());
    System.out.println(distance(a, b));
    } 
}

Результат:

TERMINAL

x: 0, y: 2
x: 10, y: 10
12.806248474865697

Вывод код работает правильно. (По порядку вызывается строки кода: 608, 609, 604, 605, 599, 600, 601, затем в обратном порядке).

```



</details>


-) Переписать код, что бы защитить его от внешних изменений. Переписываем
нижеследующим образом: 1) строка 682, 2) строка 688, 3) 738, 4) 739, 5) 699, 
6) 703, 7) 743, 8) 744

<details>

<summary></summary>


```javascript

Переписываем  файл класса и файл клиентского кода:

файл класса:

package ansel.OOP.komp2.Lesson_komp2.L1_komp2;

public class Point2D {
    private int x, y; // 1) закрываем координаты х и у (с помощью private, как на чтение так и на запись, однако по логике нам может понадобиться чтение поэтому продолжаем изменения)
    public Point2D(int valueX, int valueY) {
       x = valueX;
       y = valueY;
    }

    public int getX(){    // 2) создаем метод разграничиващий права доступа далее в клиентский файл выводим код этого метода
        return x;
    }
    public int getY(){
        return y;
    }

    public Point2D(int value){
        this(value, value);
    } 

    public void setX(int value){ // 5) создаем метод именить координату х
        this.x = value;
    }

    public void setY(int value){ // 6) создаем метод именить координату у
        this.y = value;
    }

    public Point2D() {
        this(0);
    }
    private String getInfo() {
    return String.format("x: %d, y: %d", x, y);
    }

    @Override
    public String toString() {
            return getInfo();
    }
}

файл клиентского кода:


package ansel.OOP.komp2.Lesson_komp2;

import ansel.OOP.komp2.Lesson_komp2.L1_komp2.Point2D;

public class Program {
static double distance (int x1, int y1, int x2, int y2){
    return Math.sqrt(Math.pow(x2-x1, 2) + Math.pow(y2-y1, 2));
}
static double distance (Point2D a, Point2D b){
    return Math.sqrt(Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2));
}
public static void main(String [] args) {
    Point2D a = new Point2D(0, 2);
   
    System.out.println(a);
    System.out.println(a.getX()); // 3) вносим код метода возращающего координату х (теперь изменить координату возможно только созданием отдельного метода в файле класса)
    System.out.println(a.getY()); // 4) вносим код метода возращающего координату у (теперь изменить координату возможно только созданием отдельного метода в файле класса)

    Point2D b = new Point2D(10);
    System.out.println(b.toString());
    a.setX(12); // 7) получаем доступ к записи
    System.out.println(a.setX()); // 8) получаем доступ к чтению, тем самым разграничили права доступа, т.к. отдельный функционал отвечает за изменение данных, отдельный за чтение данных
    //System.out.println(b.toString());
    System.out.println(distance(a, b));
    } 
}




```



</details>


-) -

<details>

<summary></summary>



```javascript

-


```



</details>


-) -

<details>

<summary></summary>



```javascript

-


```



</details>


-) -

<details>

<summary></summary>



```javascript

-


```



</details>


-) -

<details>

<summary></summary>



```javascript

-


```



</details>


-) -

<details>

<summary></summary>



```javascript

-


```



</details>


-) -

<details>

<summary></summary>



```javascript

-


```



</details>


-) -

<details>

<summary></summary>



```javascript

-


```



</details>


-) -

<details>

<summary></summary>



```javascript

-


```



</details>


-) -

<details>

<summary></summary>



```javascript

-


```



</details>


-) -

<details>

<summary></summary>



```javascript

-


```



</details>


-) -

<details>

<summary></summary>



```javascript

-


```



</details>


-) -

<details>

<summary></summary>



```javascript

-


```



</details>

